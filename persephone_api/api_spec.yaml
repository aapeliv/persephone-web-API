basePath: /v0.1

swagger: "2.0"


info:
  title: "{{title}}"
  description: "This is an Alpha version of the persephone web API."
  version: "0.1"

schemes:
  - http
  - https

consumes:
  - application/json
  - multipart/form-data

produces:
  - application/json

paths:
  /audio:
    get:
      summary: "Retrieve all audio files that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/audioFileInformation"
    post:
      summary: "Upload an audio file"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: audioFile
          type: file
          required: true
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/audioFileInformation"
        415:
          description: "Bad filetype"
  /audio/{audioID}:
    get:
      summary: "Get information about an uploaded audio file"
      produces:
        - application/json
      parameters:
        - name: audioID
          in: path
          description: "ID of audio file to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/audioFileInformation"
        404:
          description: "Audio file ID not found"
  /backend:
    get:
      summary: "Get information about the backend package processing transcriptions"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/backendInformation"
  /corpus:
    get:
      summary: "Retrieve all models that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/corpusInformation"
    post:
      summary: "Create a new corpus"
      consumes:
        - application/json
      parameters:
        - name: corpusInfo
          in: body
          schema:
            type: object
            required:
              - name
              - training
              - validation
              - testing
            properties:
              name:
                type: string
                description: "The name of this corpus"
                example: "ExampleLang Corpus 3"
              training:
                $ref: "#/definitions/IDarray"
              validation:
                $ref: "#/definitions/IDarray"
              testing:
                $ref: "#/definitions/IDarray"
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/corpusInformation"
  /corpus/{corpusID}:
    get:
      summary: "Get information about an uploaded corpus"
      produces:
        - application/json
      parameters:
        - name: corpusID
          in: path
          description: "ID of corpus to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/corpusInformation"
        404:
          description: "Corpus not found"
  /corpus/labels/{corpusID}:
    get:
      operationId: persephone_api.api_endpoints.corpus.get_label_set
      summary: "Get the set of labels as defined by the corpus"
      produces:
        - application/json
      parameters:
        - name: corpusID
          in: path
          description: "ID of corpus to return label set for"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/labelSetInformation"
        404:
          description: "Corpus not found"
  /corpus/preprocess/{corpusID}:
    post:
      operationId: persephone_api.api_endpoints.corpus.preprocess
      summary: "Preprocess a corpus for use with persephone"
      produces:
        - application/json
      parameters:
        - name: corpusID
          in: path
          description: "ID of corpus to preprocess"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/corpusInformation"
        404:
          description: "Corpus not found"
  /corpus/fromZip:
    post:
      summary: "Create a corpus from a Zip file"
      operationId: persephone_api.api_endpoints.corpus.create_from_zip
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: zippedFile
          type: file
          required: true
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/corpusInformation"
        415:
          description: "Bad filetype"

  /label:
    get:
      summary: "Retrieve all phonetic labels that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/label"
    post:
      summary: "Create a phonetic label that can be used in transcriptions"
      consumes:
        - application/json
      parameters:
        - name: labelInfo
          in: body
          schema:
            type: object
            required:
              - phoneticLabel
            properties:
              phoneticLabel:
                type: string
                description: "The phonetic label"
      responses:
        201:
          description: "label created"
  /model:
    get:
      summary: "Retrieve all models that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/modelInformation"
    post:
      summary: "Create a new RNN CTC model"
      consumes:
        - application/json
      parameters:
        - name: modelInfo
          in: body
          schema:
            $ref: "#/definitions/modelInformation"
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/modelInformation"
        400:
          description: "Invalid model specification"
  /model/train/{modelID}:
    post:
      operationId: persephone_api.api_endpoints.model.train
      summary: "Submit a request to train a model"
      produces:
        - application/json
      parameters:
        - name: modelID
          in: path
          description: "ID of model to train"
          required: true
          type: integer
          format: "int64"
      responses:
        202:
          description: "Accepted for processing"
          schema:
            $ref: "#/definitions/task"
        404:
          description: "Model not found"
  /model/transcribe/{modelID}/{audioID}:
    post:
      operationId: persephone_api.api_endpoints.model.transcribe
      summary: "Submit a request to transcribe an audio file using a model"
      produces:
        - application/json
      parameters:
        - name: modelID
          in: path
          description: "ID of model being used"
          required: true
          type: integer
          format: "int64"
        - name: audioID
          in: path
          description: "ID of audio file being transcribed"
          required: true
          type: integer
          format: "int64"
      responses:
        202:
          description: "Accepted for processing"
          schema:
            $ref: "#/definitions/task"
        404:
          description: "Not found"

  /transcription:
    get:
      summary: "Retrieve all transcriptions that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/transcriptionFileInformation"
    post:
      summary: "Upload an transcription file"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: transcriptionFile
          type: file
          required: true
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/transcriptionFileInformation"
        415:
          description: "Bad filetype"

  /transcription/{transcriptionID}:
    get:
      summary: "Get information about an uploaded transcription file"
      produces:
        - application/json
      parameters:
        - name: transcriptionID
          in: path
          description: "ID of transcription file to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/transcriptionFileInformation"
        404:
          description: "Transcription not found"

  /utterance:
    get:
      summary: "Retrieve all utterances that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/utteranceInformation"
    post:
      summary: "Create a new utterance"
      consumes:
        - application/json
      parameters:
        - in: body
          name: utteranceInfo
          schema:
            type: object
            required:
              - audioId
              - transcriptionId
            properties:
              audioId:
                type: integer
                format: "int64"
              transcriptionId:
                type: integer
                format: "int64"
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/utteranceInformation"
        400:
          description: "Invalid utterance"
        409:
          description: "Already exists"
  /utterance/{utteranceID}:
    get:
      summary: "Get information about an an utterance"
      produces:
        - application/json
      parameters:
        - name: utteranceID
          in: path
          description: "ID of utterance to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/utteranceInformation"
        404:
          description: "Utterance not found"


definitions:
  audioFileInformation:
    type: "object"
    required:
    - "name"
    - "fileURL"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "recording_123.wav"
      fileURL:
        type: "string"
        example: "/path/to/file/recording_123.wav"
  backendInformation:
    type: "object"
    required:
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        example: "Persephone"
        description: "Name of backend software package performing the transcription"
      version:
        type: "string"
        description: "Version of backend software package performing the transcription"
      projectURL:
        type: "string"
        example: "http://persephone.readthedocs.io/en/latest/"
        description: "URL for this project"
  corpusInformation:
    type: "object"
    required:
    - "name"
    - "partition"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        description: "The name of this corpus"
        example: "ExampleLang Corpus"
      label_type:
        type: "string"
        description: "The type of labels"
        example: "phonemes"
      feature_type:
        type: "string"
        description: "The type of the features"
        example: "fbank"
      max_samples:
        type: "integer"
        format: "int64"
        minimum: 0
        example: 1000
        description: "The maximum number of samples an utterance in the corpus may have. If an utterance is longer than this, it is not included in the corpus."
      partition:
        type: object
        description: "How utterances are assigned to datasets for use in training the model"
        properties:
          training:
            type: array
            items:
              $ref: "#/definitions/utteranceInformation"
            description: "Utterances in training set"
          validation:
            type: array
            items:
              $ref: "#/definitions/utteranceInformation"
            description: "Utterances in validation set"
          testing:
            type: array
            items:
              $ref: "#/definitions/utteranceInformation"
            description: "Utterances in testing set"
  IDarray:
    type: "array"
    items:
      type: "integer"
      format: "int64"
      minimum: 0
  label:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      label:
        type: "string"
        description: "An atomic phonetic label as used in speech models"
  labelSetInformation:
    type: "object"
    properties:
      corpus:
        $ref: "#/definitions/corpusInformation"
      labels:
        type: "array"
        items:
          $ref: "#/definitions/label"

  modelInformation:
    type: "object"
    required:
    - "name"
    - "corpusID"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: string
        description: "The name of this model"
        example: "ExampleLang model 1"
      beamWidth:
        description: "Beam width size"
        type: integer
        format: "int64"
        minimum: 0
      corpusID:
        description: "The ID of the corpus to use for this model"
        type: integer
        format: "int64"
      decodingMergeRepeated:
        description: "Merge repeated characters when decoding"
        type: boolean
      earlyStoppingSteps:
        description: " Stop training after this number of steps if no LER improvement has been made"
        type: integer
        format: "int64"
        minimum: 0
      hiddenSize:
        description: "Size of the hidden layers"
        type: integer
        format: "int64"
        minimum: 0
      numberLayers:
        description: "Number of layers in the network"
        type: integer
        format: "int64"
        minimum: 0
      minimumEpochs:
        description: "Minimum number of training epochs"
        type: integer
        format: "int64"
        minimum: 0
      maximumEpochs:
        description: "Maximum number of training epochs"
        type: integer
        format: "int64"
        minimum: 0
  task:
    type: "object"
    required:
    - URL
    properties:
      URL:
        description: "URL path to check on task progress"
        type: "string"
  transcriptionFileInformation:
    type: "object"
    required:
    - "name"
    - "fileURL"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "transcription.txt"
      manuallyGenerated:
        type: boolean
        description: "Flag if this file was generated manually. Useful for keeping track of training files"
      fileURL:
        type: "string"
        example: "/path/to/file/transcription.txt"
  utteranceInformation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      audio:
        $ref: "#/definitions/audioFileInformation"
      transcription:
        $ref: "#/definitions/transcriptionFileInformation"
    required:
    - "audio"
    - "transcription"
