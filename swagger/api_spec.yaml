basePath: /v0.1

swagger: "2.0"


info:
  title: "{{title}}"
  description: "This is an Alpha version of the persephone web API."
  version: "0.1"

schemes:
  - http
  - https

consumes:
  - application/json
  - multipart/form-data

produces:
  - application/json

paths:
  /audio:
    post:
      summary: "Upload an audio file"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: audioFile
          type: file
          required: true
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/audioFileInformation"
        415:
          description: "Bad filetype"
  /audio/{audioID}:
    get:
      summary: "Get information about an uploaded audio file"
      produces:
        - application/json
      parameters:
        - name: audioID
          in: path
          description: "ID of audio file to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/audioFileInformation"
        404:
          description: "Audio file ID not found"
  /backend:
    get:
      summary: "Get information about the backend package processing transcriptions"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/backendInformation"
  /corpus:
    get:
      summary: "Retrieve all models that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/corpusInformation"
    post:
      summary: "Create a new corpus"
      consumes:
        - application/json
      parameters:
        - name: corpusInfo
          in: body
          schema:
            type: object
            required:
              - name
              - training
              - validation
              - testing
            properties:
              name:
                type: string
                description: "The name of this corpus"
                example: "ExampleLang Corpus 3"
              training:
                $ref: "#/definitions/IDarray"
              validation:
                $ref: "#/definitions/IDarray"
              testing:
                $ref: "#/definitions/IDarray"
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/corpusInformation"
  /corpus/{corpusID}:
    get:
      summary: "Get information about an uploaded corpus"
      produces:
        - application/json
      parameters:
        - name: corpusID
          in: path
          description: "ID of corpus to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/corpusInformation"
        404:
          description: "Corpus not found"
  /corpus/fromZip:
    post:
      summary: "Create a corpus from a Zip file"
      operationId: api.corpus.create_from_zip
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: zippedFile
          type: file
          required: true
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/corpusInformation"
        415:
          description: "Bad filetype"

  /model:
    get:
      summary: "Retrieve all models that are currently available"
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: "#/definitions/modelInformation"
  /transcription:
    post:
      summary: "Upload an transcription file"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: transcriptionFile
          type: file
          required: true
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/transcriptionFileInformation"
        415:
          description: "Bad filetype"

  /transcription/{transcriptionID}:
    get:
      summary: "Get information about an uploaded transcription file"
      produces:
        - application/json
      parameters:
        - name: transcriptionID
          in: path
          description: "ID of transcription file to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/transcriptionFileInformation"
        404:
          description: "Transcription not found"

  /utterance:
    post:
      summary: "Create a new utterance"
      consumes:
        - application/json
      parameters:
        - in: body
          name: utteranceInfo
          schema:
            type: object
            required:
              - audioId
              - transcriptionId
            properties:
              audioId:
                type: integer
                format: "int64"
              transcriptionId:
                type: integer
                format: "int64"
      responses:
        201:
          description: success
          schema:
            $ref: "#/definitions/utteranceInformation"
        400:
          description: "Invalid utterance"
        409:
          description: "Already exists"
  /utterance/{utteranceID}:
    get:
      summary: "Get information about an an utterance"
      produces:
        - application/json
      parameters:
        - name: utteranceID
          in: path
          description: "ID of utterance to return information about"
          required: true
          type: integer
          format: "int64"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/utteranceInformation"
        404:
          description: "Utterance not found"


definitions:
  audioFileInformation:
    type: "object"
    required:
    - "name"
    - "fileURL"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "recording_123.wav"
      fileURL:
        type: "string"
        example: "/path/to/file/recording_123.wav"
  backendInformation:
    type: "object"
    required:
    - "name"
    - "version"
    properties:
      name:
        type: "string"
        example: "Persephone"
        description: "Name of backend software package performing the transcription"
      version:
        type: "string"
        description: "Version of backend software package performing the transcription"
      projectURL:
        type: "string"
        example: "http://persephone.readthedocs.io/en/latest/"
        description: "URL for this project"
  corpusInformation:
    type: "object"
    required:
    - "name"
    - "partition"
    properties:
      name:
        type: "string"
        description: "The name of this corpus"
        example: "ExampleLang Corpus"
      partition:
        type: object
        description: "How utterances are assigned to datasets for use in training the model"
        properties:
          training:
            type: array
            items:
              $ref: "#/definitions/utteranceInformation"
            description: "Utterances in training set"
          validation:
            type: array
            items:
              $ref: "#/definitions/utteranceInformation"
            description: "Utterances in validation set"
          testing:
            type: array
            items:
              $ref: "#/definitions/utteranceInformation"
            description: "Utterances in testing set"
  IDarray:
    type: "array"
    items:
      type: "integer"
      format: "int64"
      minimum: 0
  modelInformation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "na_example_small"
  transcriptionFileInformation:
    type: "object"
    required:
    - "name"
    - "fileURL"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "transcription.txt"
      manuallyGenerated:
        type: boolean
        description: "Flag if this file was generated manually. Useful for keeping track of training files"
      fileURL:
        type: "string"
        example: "/path/to/file/transcription.txt"
  utteranceInformation:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      audio:
        $ref: "#/definitions/audioFileInformation"
      transcription:
        $ref: "#/definitions/transcriptionFileInformation"
    required:
    - "audio"
    - "transcription"
